#!/bin/bash
#
#    Version:        2017.04
#    Authors:        sysadmin@vhalholl.info
#    Description:    manage VIMproved  modules under pathogen <https://github.com/tpope/vim-pathogen>
#    Dependencies:   vim git

if [[ "$#" -gt "2" || "$#" == "2" ]];then
    vArgs=$(echo "$*" |awk '{print substr($0, index($0,$2))}')
else
    vArgs=''
fi

vCurentDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
vLogFile="$vCurentDir/adn/.apthogen-$(date +%Y%m%d).log"
vBundleDb="$vCurentDir/adn/.apthogen.list"
vBundlesDir="$vCurentDir/bundle"
vBundlesAvailable="$vCurentDir/bundle-available"

fUsage(){
    echo "Usage : $0 {install|remove|enable|disable|update|upgrade|list|search|show|help}"
}

fWriteLog(){
    [[ -z "$*" ]]||{
        echo "$(date +%Y%m%d%H%M%S) Apthogen::$*" > "$vLogFile"
        echo "Apthogen::$*"
    }
}

fModuleEnable(){
    [[ ! -z "$1" ]]&&{
        [[ ! -d "$vBundlesAvailable/$1" ]]&&{ echo "Module $1 is unavailable"; }||{
            [[ ! -L "$vBundlesDir/$1" ]]&&{
                cd "$vBundlesDir"
                ln -s "$vBundlesAvailable/$1" 
                cd "$vCurentDir"
                fWriteLog "Module $1 enabled"
            }||{ 
                fWriteLog "Module $1 already exist"
            }
        }
    }||{
        echo -e "Usage : $0 enable [module_name]";
    }
}

fModuleDisable(){
    [[ ! -z "$1" ]]&&{
        [[ -L "$vBundlesDir/$1" ]]&&{
            rm "$vBundlesDir/$1" && echo "Module $1 disabled"
        }||{ 
            fWriteLog "Module $1 not found !"
        }
    }||{
        echo -e "Usage : $0 disable [module_name]";
    }
}

fModuleRemove(){
    [[ ! -z "$1" ]]&&{
        [[ -d "$vBundlesAvailable/$1" ]]&&{
            fModuleDisable "$1" 
            rm -rf "${vBundlesAvailable:?}/$1" && echo "Module $1 removed"
        }||{ 
            fWriteLog "Module $1 not found !"
        }
    }||{
        echo -e "Usage : $0 remove [modulename]";
    }
}

fModuleListUpdate(){
    [[ ! -z "$1" ]]&&{ 
        [[ -d "$vBundlesAvailable/$1/.git" ]]&&{ 
            url=$(grep 'url' "${vBundlesAvailable}/${1}/.git/config" |awk '{print $3}');
            fwriteLog "Indexing module $1 @ $url";
            echo "$i@$j" >> "$vBundleDb";
        }
    }||{
        cd "$vBundlesAvailable" || exit 255
        #if not exist modulelist or empty and module dir is not empty then create modulelist
        [[ ! -s "$vBundleDb" && $(ls -l |grep -c ^d) != 0 ]]&& { #create modulelist
            fWriteLog "Error: There is no $vBundleDb file suitable, indexing from $vBundlesAvailable directory"
            for i in $(ls -l |grep ^d |awk '{print $9}');do 
                j=$(grep 'url' "${i}/.git/config" |awk '{print $3}');
                fWriteLog "Indexing: module $i @ $j";
                echo "$i@$j" >> "$vBundleDb";
            done
        }||{ #else compare and add to modulelist
            [[ "$(wc -l "$vBundleDb")" != "$(ls -l |grep -c ^d)" ]]&& {
                for i in $(ls -l |grep ^d |awk '{print $9}');do 
                    j=$(grep "${i}/.git/config" |awk '{print $3}');
                    [[ $(grep "$i@$j" "$vBundleDb") ]]|| {
                        fWriteLog "Indexing new module $i @$j"; 
                        echo "$i@$j" >> "$vBundleDb";
                        #TODO write temp file before process
                        temp=$(sort "$vBundleDb"); rm "$vBundleDb";
                        for h in $(echo "$temp" | tr ' ' '\n');do 
                            echo "$h" >> "$vBundleDb";
                        done
                    }
                done
            }
        }
        cd "$vCurentDir" || return 255
    }
}

fModuleInstall(){
    [[ ! -z "$1" ]]&& {
        fWriteLog "Phagocyte::$1"
        cd "$vBundlesAvailable" && git clone "$1" &>>"$vLogFile" && fModuleListUpdate "$1"
    } || echo -e "Usage : $0 add [https|git://url_of_git_repository]"
}

fModuleUpgrade(){
    cd "$vBundlesAvailable" || return  255
    [[ -z "$1" ]]&&{
        for d in $(ls -d */);do 
            [[ -d "$d/.git" ]]&&{ 
                fWriteLog "Evolve::$d"; 
                cd "$d" && git pull &>>"$vLogFile" && cd "$vCurentDir"
            }
        done 
    }||{
        [[ -d "$1/.git" ]]&&{
            fWriteLog "Evolve::$1"
            cd "$1" && git pull &>> "$vLogFile";
        }||{ 
            fWriteLog "Error: There is no place like $1"; 
        }
    }
    cd "$vCurentDir" || return 255
}

fModuleList(){
    [[ -s "$vBundleDb" ]]&&{ 
        awk 'BEGIN { FS="@" };{ print $1" "$2  }' "$vBundleDb" |column -t; 
    }||{ fWriteLog "Error: File $vBundleDb not found ! You may run $0 update before"; }
}

fModuleSearch(){
    [[ ! -z "$1" ]]&&{
        [[ -s "$vBundleDb" ]]&& { 
        for i in $(fModuleList |awk '{print $1}' |grep "$1");do
            fModuleList |grep "$i";
        done
        }
    }||{ 
        echo -e "Usage : $0 search [searchpatern]";
    } 
}

fModuleShow(){
    [[ ! -z "$1" ]]&&{
        for i in $(fModuleSearch "$1" |awk '{print $2}' |grep "$1");do
            #baseUrl="$(echo "$i" |sed 's/github/raw.githubusercontent/')/master/README";
            baseUrl="${i//github/raw.githubusercontent/}/master/README";
            for j in {md,markdown};do 
                [[ $(curl -sL "$baseUrl"."$j") != "404: Not Found" ]]&& curl -sL "$baseUrl"."$j" |less;
            done
        done
    }||{
        curl -SL https://raw.githubusercontent.com/vhalholl/vim-apthogen/master/README.md |less;
    }  
}

fModuleImport(){
    [[ ! -z "$1" ]]&&{
        case "$1" in
            *)
                for i in $(fModuleSearch "$1" |grep -v 'vim-config' |awk '{print $2}' );do fModuleInstall "$i";done;
                for i in $(fModuleSearch "$1" |grep -v 'vim-config' |awk '{print $1}' );do fModuleEnable "$i";done;
            ;;
            All|all)
                for i in $(fModuleList |grep -v 'vim-config' |awk '{print $2}' );do fModuleInstall "$i";done;
                for i in $(fModuleList |grep -v 'vim-config' |awk '{print $1}' );do fModuleEnable "$i";done;
            ;;
        esac
    }||{
        echo -e "Usage $0 install [module_name]";
    }
}

case $1 in
    add)
        fModuleInstall $vArgs
    ;;
    install)
        fModuleImport $vArgs
    ;;
    remove)
        fModuleRemove $vArgs
    ;;
    enable)
        fModuleEnable $vArgs
    ;;
    disable)
        fModuleDisable $vArgs
    ;;
    update)
        fModuleUpgrade vim-apthogen
    ;;
    updatelist)
        fModuleListUpdate
    ;;
    upgrade)
        fModuleUpgrade $vArgs
    ;;
    list)
        fModuleList $vArgs
    ;;
    search)
        fModuleSearch $vArgs
    ;;
    show)
        fModuleShow $vArgs
    ;;
    help)
        fModuleShow
    ;;
    import)
        fModuleImport $vArgs
    ;;
    *) 
        fUsage
    ;;
esac
